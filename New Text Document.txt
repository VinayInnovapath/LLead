backend/controllers/authController.js:

// controllers/authController.js
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const SECRET_KEY = 'innova-path'; // Using 'innova-path' as the JWT secret key

const login = (req, res) => {
  const { username, password } = req.body;
  const db = req.db;

  // Query to check user credentials from the 'authuser' table
  db.query('SELECT * FROM whiteboxqa.authuser WHERE uname = ?', [username], (err, results) => {
    if (err) {
      console.error('Database query error:', err);
      return res.status(500).json({ message: 'Database error' });
    }
    if (results.length === 0) {
      return res.status(401).json({ message: 'Invalid username or password' });
    }

    const user = results[0];

    // Directly compare the plaintext password with the password stored in the database
    if (password === user.passwd) {
      // Create a JWT
      const token = jwt.sign({ id: user.id, username: user.uname }, SECRET_KEY, { expiresIn: '1h' });

      return res.json({ token, message: `Welcome back, ${user.uname}!` });
    } else {
      return res.status(401).json({ message: 'Invalid username or password' });
    }
  });
};

module.exports = { login };


backend/controllers/leadsController.js:
const mysql = require('mysql2');

// Connect to the database
const db = mysql.createConnection({
  host: '35.232.56.51',
  user: 'whiteboxqa',
  password: 'Innovapath1',
  database: 'whiteboxqa',
});

const getLeads = (req, res) => {
  db.query('SELECT * FROM leads', (err, results) => {
    if (err) {
      console.error('Database query error:', err);
      return res.status(500).json({ message: 'Database error' });
    }
    res.json(results);
  });
};

module.exports = { getLeads };


backend/controllers/userController.js:

const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const SECRET_KEY = 'innova-path'; // Using 'innova-path' as the JWT secret key

const login = (req, res) => {
  const { username, password } = req.body;
  const db = req.db;

  // Query to check user credentials from the 'authuser' table
  db.query('SELECT * FROM whiteboxqa.authuser WHERE uname = ?', [username], (err, results) => {
    if (err) {
      console.error('Database query error:', err);
      return res.status(500).json({ message: 'Database error' });
    }
    if (results.length === 0) {
      return res.status(401).json({ message: 'Invalid username or password' });
    }

    const user = results[0];

    // Directly compare the plaintext password with the password stored in the database
    if (password === user.passwd) {
      // Create a JWT
      const token = jwt.sign({ id: user.id, username: user.uname }, SECRET_KEY, { expiresIn: '1h' });

      return res.json({ token, message: `Welcome back, ${user.uname}!` });
    } else {
      return res.status(401).json({ message: 'Invalid username or password' });
    }
  });
};

const getLeads = (req, res) => {
  const { page = 1, pageSize = 100 } = req.query; // Default to page 1 and 100 items per page
  const offset = (page - 1) * pageSize;

  const query = 'SELECT * FROM whiteboxqa.leads LIMIT ? OFFSET ?';
  const queryParams = [parseInt(pageSize), parseInt(offset)];

  req.db.query(query, queryParams, (err, results) => {
    if (err) {
      console.error('Database query error:', err);
      return res.status(500).json({ message: 'Database error' });
    }
    res.json(results);
  });
};

module.exports = { login, getLeads };


backend/routes/authRoutes.js:
 const express = require('express');
const { login, getLeads } = require('../controllers/userController'); // Ensure correct import

const router = express.Router();

router.post('/login', login);
router.get('/leads', getLeads); // This should correctly reference the function

module.exports = router;



backend/routes/leadsRoutes.js:
const express = require('express');
const router = express.Router();
const mysql = require('mysql2'); // Use mysql2 instead of mysql

// Create MySQL connection
const db = mysql.createConnection({
  host: '35.232.56.51',
  user: 'whiteboxqa',
  password: 'Innovapath1',
  database: 'whiteboxqa'
});

// Middleware to handle database connection
router.use((req, res, next) => {
  req.db = db;
  next();
});

// Route to get leads with pagination
router.get('/leads', (req, res) => {
  const db = req.db;
  if (!db) {
    return res.status(500).json({ message: 'Database connection error' });
  }

  const page = parseInt(req.query.page, 10) || 1; // Page number
  const pageSize = parseInt(req.query.pageSize, 10) || 100; // Number of items per page
  const offset = (page - 1) * pageSize;

  // Query to fetch data with pagination
  db.query(
    'SELECT * FROM leads LIMIT ? OFFSET ?',
    [pageSize, offset],
    (err, results) => {
      if (err) {
        console.error('Database query error:', err);
        return res.status(500).json({ message: 'Database error' });
      }

      // Query to count total rows
      db.query('SELECT COUNT(*) AS total FROM leads', (countErr, countResults) => {
        if (countErr) {
          console.error('Count query error:', countErr);
          return res.status(500).json({ message: 'Database error' });
        }
        const totalRows = countResults[0].total;
        res.json({ data: results, totalRows });
      });
    }
  );
});

module.exports = router;


leads/src/AddRowModal.js:
import React, { useState } from 'react';
import Modal from 'react-modal';
import './welcome.css'; // Ensure this path is correct

Modal.setAppElement('#root');

const AddRowModal = ({ isOpen, onRequestClose, onSave }) => {
  const [formData, setFormData] = useState({
    leadid: '',
    name: '',
    startdate: '',
    phone: '',
    email: '',
    priority: '',
    workstatus: '',
    source: '',
    workexperience: '',
    sourcename: '',
    course: '',
    intent: '',
    attendedclass: '',
    siteaccess: '',
    assignedto: '',
    status: '',
    secondaryemail: '',
    secondaryphone: '',
    address: '',
    spousename: '',
    spouseemail: '',
    spousephone: '',
    spouseoccupationinfo: '',
    city: '',
    state: '',
    country: '',
    zip: '',
    faq: '',
    callsmade: '',
    closedate: '',
    notes: '',
    lastmoddatetime: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
    onRequestClose();
  };

  return (
    <Modal
      isOpen={isOpen}
      onRequestClose={onRequestClose}
      className="modal-content"
      overlayClassName="modal-overlay"
    >
      <div className="modal-header">
        <h2 className="modal-title">Add New Lead</h2>
        <button className="modal-close-button" onClick={onRequestClose}>&times;</button>
      </div>
      <form onSubmit={handleSubmit} className="modal-body">
        {Object.keys(formData).map((key) => (
          <div key={key} className="modal-field">
            <label htmlFor={key}>{key.charAt(0).toUpperCase() + key.slice(1)}</label>
            <input
              type="text"
              id={key}
              name={key}
              value={formData[key]}
              onChange={handleChange}
            />
          </div>
        ))}
        <div className="modal-actions">
          <button type="button" className="cancel-button" onClick={onRequestClose}>Cancel</button>
          <button type="submit" className="save-button">Save</button>
        </div>
      </form>
    </Modal>
  );
};

export default AddRowModal;


leads/src/App.js:
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Login from './Login';
import Welcome from './Welcome';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Login />} />
        <Route path="/welcome" element={<Welcome />} />
      </Routes>
    </Router>
  );
}

export default App;

leads/src/Login.js:
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const styles = {
  container: {
    maxWidth: '400px',
    margin: '0 auto',
    padding: '20px',
    background: '#f9f9f9',
    borderRadius: '8px',
    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
  },
  title: {
    textAlign: 'center',
    marginBottom: '20px',
    color: '#333',
  },
  form: {
    display: 'flex',
    flexDirection: 'column',
  },
  formGroup: {
    marginBottom: '15px',
  },
  label: {
    display: 'block',
    marginBottom: '5px',
    color: '#555',
  },
  input: {
    width: '100%',
    padding: '10px',
    border: '1px solid #ddd',
    borderRadius: '4px',
    boxSizing: 'border-box',
  },
  button: {
    width: '100%',
    padding: '10px',
    background: '#007bff',
    color: '#fff',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '16px',
  },
  buttonHover: {
    background: '#0056b3',
  },
  error: {
    color: 'red',
    textAlign: 'center',
    marginTop: '10px',
  },
  success: {
    color: 'green',
    textAlign: 'center',
    marginTop: '10px',
  },
};

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [message, setMessage] = useState('');
  const [token, setToken] = useState('');

  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:8001/api/auth/login', { username, password });
      setToken(response.data.token);
      setMessage(response.data.message);
      setError('');

      // Redirect to the welcome page
      navigate('/welcome', { state: { message: response.data.message } });

    } catch (err) {
      setError('Invalid username or password');
      setMessage('');
    }
  };

  return (
    <div style={styles.container}>
      <h2 style={styles.title}>Login</h2>
      <form onSubmit={handleSubmit} style={styles.form}>
        <div style={styles.formGroup}>
          <label style={styles.label}>Username</label>
          <input
            type="text"
            style={styles.input}
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            required
          />
        </div>
        <div style={styles.formGroup}>
          <label style={styles.label}>Password</label>
          <input
            type="password"
            style={styles.input}
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <button
          type="submit"
          style={styles.button}
          onMouseOver={(e) => e.currentTarget.style.background = styles.buttonHover.background}
          onMouseOut={(e) => e.currentTarget.style.background = styles.button.background}
        >
          Login
        </button>
      </form>
      {error && <p style={styles.error}>{error}</p>}
      {message && <p style={styles.success}>{message}</p>}
    </div>
  );
};

export default Login;

leads/src/Welcome.js:
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import './welcome.css';
import AddRowModal from './AddRowModal'; // Ensure this path is correct
import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';

const Welcome = () => {
  const [rowData, setRowData] = useState([]);
  const [columnDefs, setColumnDefs] = useState([]);
  const [paginationPageSize, setPaginationPageSize] = useState(100);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalRows, setTotalRows] = useState(0);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedRow, setSelectedRow] = useState(null); // Define the selectedRow state

  

  useEffect(() => {
    fetchData(currentPage);
  }, [currentPage]);

  const onRowClicked = event => {
    setSelectedRow(event.data); // Set the selected row's data
  };

  const fetchData = async (page) => {
    try {
      const response = await axios.get('http://localhost:8001/api/leads', {
        params: {
          page,
          pageSize: paginationPageSize
        }
      });
      const { data, totalRows } = response.data;
      setRowData(data);
      setTotalRows(totalRows);
      setupColumns(data);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  const setupColumns = (data) => {
    if (data.length > 0) {
      const keys = Object.keys(data[0]);
      const columns = keys.map(key => ({
        headerName: key.charAt(0).toUpperCase() + key.slice(1),
        field: key
      }));
      setColumnDefs(columns);
    }
  };

  const handleAddRow = () => {
    setIsModalOpen(true);
  };

  const handleSaveRow = (newRow) => {
    // Implement logic to save the new row to the database or state
    console.log('New Row Data:', newRow);
  };

  const handleExportToExcel = () => {
    const ws = XLSX.utils.json_to_sheet(rowData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Leads');
    XLSX.writeFile(wb, 'leads.xlsx');
  };

  const handleExportToPDF = () => {
    const doc = new jsPDF();
    doc.text('Leads Data', 10, 10);
    rowData.forEach((row, index) => {
      doc.text(Object.values(row).join(', '), 10, 20 + index * 10);
    });
    doc.save('leads.pdf');
  };

  const handlePageChange = (event) => {
    setCurrentPage(Number(event.target.value));
  };

  const totalPages = Math.ceil(totalRows / paginationPageSize);
  const pageOptions = Array.from({ length: totalPages }, (_, i) => i + 1);

  return (
    <div className="custom-grid-container">
      <div className="header-box">
        <h1 className="header-title">Lead Management</h1>
        <div className="header-controls">
          <select
            className="page-dropdown"
            value={currentPage}
            onChange={handlePageChange}
          >
            {pageOptions.map(page => (
              <option key={page} value={page}>
                {page}
              </option>
            ))}
          </select>
        </div>
      </div>
      <div className="ag-theme-alpine">
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          rowSelection="single" // Enables single row selection
          onRowClicked={onRowClicked} // Handle row click

          pagination={true}
          paginationPageSize={paginationPageSize}
        />
      </div>
      <div className="action-buttons">
        <button className="action-button" title="Add New Row" onClick={handleAddRow}>+</button>
        <button className="action-button" title="Edit Selected Row">✏️</button>
        <button className="action-button" title="View Selected Row">📄</button>
        <button className="action-button" title="Find Records">🔍</button>
        <button className="action-button" title="Reload Grid">🔄</button>
        <button className="action-button" title="Export to Excel" onClick={handleExportToExcel}>📊</button>
        <button className="action-button" title="Export to PDF" onClick={handleExportToPDF}>📄</button>
      </div>
      <AddRowModal
        isOpen={isModalOpen}
        onRequestClose={() => setIsModalOpen(false)}
        onSave={handleSaveRow}
      />
    </div>
  );
};

export default Welcome;


leads/src/welcome.css:
/* Base font settings for consistency */
.custom-grid-container {
  height: 600px;
  width: 90%;
  max-width: 1200px;
  position: relative;
  font-family: Arial, sans-serif;
  margin: 0 auto;
}

/* Header box styling */
.header-box {
  background-color: #ffffff;
  padding: 15px;
  margin-bottom: 15px;
  border-bottom: 2px solid #d0d0d0;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
}

/* Title styling */
.header-title {
  margin: 0;
  font-size: 24px;
  color: #2c3e50;
  font-weight: bold;
}

/* Header controls styling */
.header-controls {
  display: flex;
  align-items: center;
}

/* Dropdown styling */
.page-dropdown {
  padding: 8px 12px;
  border: 1px solid #bdc3c7;
  background-color: #ffffff;
  cursor: pointer;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: background-color 0.3s ease;
  position: relative;
  z-index: 10; /* Ensure it’s above the buttons */
}

/* Action buttons container styling */
.action-buttons {
  display: flex;
  align-items: center;
  gap: 8px; /* Space between buttons */
  position: absolute;
  left: 40px; /* Align to the left side */
  top: 570px; /* Position above the pagination controls */
  background-color: transparent; /* Transparent background */
  z-index: 10; /* Ensure it’s above other content */
  
}

/* Individual action button styling */
.action-button {
  border: none;
  background-color: transparent; /* Transparent background */
  color: #3498db; /* Blue icon color */
  padding: 5px; /* Smaller padding for icons */
  border-radius: 4px; /* Rounded corners */
  cursor: pointer;
  transition: color 0.3s ease, background-color 0.3s ease; /* Smooth color transition */
  font-size: 14px; /* Smaller icon size */
  position: relative; /* Ensure tooltip positioning */
}

/* Action button hover effect */
.action-button:hover {
  color: #2980b9; /* Darker blue on hover */
  background-color: rgba(0, 0, 0, 0.1); /* Slightly shaded background on hover */
}

/* Action button tooltip styling */
.action-button::after {
  content: attr(title);
  position: absolute;
  bottom: 100%; /* Position above the button */
  left: 50%;
  transform: translateX(-50%);
  background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent black background */
  color: #ffffff; /* White text */
  padding: 4px; /* Smaller padding for tooltip */
  border-radius: 4px; /* Rounded corners */
  white-space: nowrap; /* Prevent text wrapping */
  font-size: 10px; /* Smaller font size for tooltip */
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s ease, visibility 0.3s ease; /* Smooth transition */
}

/* Show tooltip on hover */
.action-button:hover::after {
  opacity: 1;
  visibility: visible;
  bottom: 120%; /* Position slightly above the button */
}

/* AG Grid theme styling */
.ag-theme-alpine {
  height: calc(100% - 70px);
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

/* Header styling */
.ag-theme-alpine .ag-header {
  background-color: #3498db;
  border-bottom: 2px solid #2980b9;
  border-radius: 8px 8px 0 0;
}

/* Header cell styling */
.ag-theme-alpine .ag-header-cell {
  font-weight: bold;
  color: #ffffff;
}

/* Cell styling */
.ag-theme-alpine .ag-cell {
  padding: 10px;
  border-bottom: 1px solid #d0d0d0;
}

/* Zebra striping for rows */
.ag-theme-alpine .ag-row:nth-child(odd) {
  background-color: #f9f9f9;
}

.ag-theme-alpine .ag-row:nth-child(even) {
  background-color: #ffffff;
}

/* Row hover effect */
.ag-theme-alpine .ag-row:hover {
  background-color: #ecf0f1;
}

/* Pagination styling */
.ag-theme-alpine .ag-pagination {
  border-top: 1px solid #d0d0d0;
  background-color: #ffffff;
  border-radius: 0 0 8px 8px;
  position: relative;
}

/* Pagination controls styling */
.ag-theme-alpine .ag-paging-page-summary-panel {
  display: flex;
  align-items: center;
  padding: 10px;
  position: relative;
}

/* Pagination panel background color */
.ag-paging-panel.ag-unselectable.ag-focus-managed {
  background-color: #ffffff; /* White background */
}

/* Adjusting positioning of action buttons relative to the page size selector */
.ag-paging-panel .ag-page-size {
  display: flex;
  align-items: center;
}

.ag-paging-panel .ag-page-size::before {
  content: "";
  display: flex;
  align-items: center;
  margin-right: 10px; /* Space between icons and page size */
}

.ag-paging-panel .action-buttons {
  margin-right: 10px; /* Space between action buttons and page size */
}

/* Modal overlay */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
    z-index: 1000; /* Ensure the modal is above other content */

}

/* Modal content */
.modal-content {
  position: absolute;
  top: 10%;
  left: 10%;
  width: 25%; /* Adjust width for a smaller size */
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  padding: 15px; /* Adjust padding as needed */
  overflow-y: auto;
  max-height: 70vh; /* Adjust max height for better visibility */
  z-index: 1001; /* Ensure modal content is above the overlay */

}

/* Modal header */
.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
}

.modal-title {
  margin: 0;
  font-size: 18px; /* Adjust font size for a smaller header */
  color: #2c3e50;
}

.modal-close-button {
  background: transparent;
  border: none;
  font-size: 18px; /* Adjust font size for close button */
  cursor: pointer;
  color: #3498db;
}

/* Modal body */
.modal-body {
  display: flex;
  flex-direction: column;
}

.modal-field {
  margin-bottom: 10px; /* Adjust margin for smaller fields */
}

.modal-field label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

.modal-field input,
.modal-field textarea {
  width: 100%;
  padding: 6px; /* Adjust padding for smaller input fields */
  border: 1px solid #bdc3c7;
  border-radius: 4px;
}

/* Modal actions */
.modal-actions {
  display: flex;
  justify-content: flex-end;
  margin-top: 15px;
}

.modal-actions button {
  padding: 8px 16px; /* Adjust padding for smaller buttons */
  margin-left: 8px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.modal-actions .save-button {
  background-color: #3498db;
  color: #fff;
}

.modal-actions .save-button:hover {
  background-color: #2980b9;
}

.modal-actions .cancel-button {
  background-color: #e0e0e0;
}

.modal-actions .cancel-button:hover {
  background-color: #bdc3c7;
}



































updated welcome.js:


import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import './welcome.css';
import AddRowModal from './AddRowModal'; // Ensure this path is correct
import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';

const Welcome = () => {
  const [allData, setAllData] = useState([]); // Store all data
  const [filteredData, setFilteredData] = useState([]); // Store filtered data
  const [rowData, setRowData] = useState([]);
  const [columnDefs, setColumnDefs] = useState([]);
  const [paginationPageSize, setPaginationPageSize] = useState(100);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalRows, setTotalRows] = useState(0);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isSearchVisible, setIsSearchVisible] = useState(false); // State to toggle search field
  const [searchValue, setSearchValue] = useState(''); // State to manage search input

  useEffect(() => {
    fetchData();

    // Add event listener for Escape key
    const handleKeyDown = (event) => {
      if (event.key === 'Escape') {
        resetSearch();
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, []);

  const fetchData = async () => {
    try {
      const response = await axios.get('http://localhost:8001/api/leads', {
        params: {
          page: 1,
          pageSize: 10000 // Adjust this value based on your needs and API limits
        }
      });
      const { data, totalRows } = response.data;
      setAllData(data); // Store all data
      setFilteredData(data); // Initialize filteredData
      setTotalRows(totalRows);
      updateRowData(data.slice(0, paginationPageSize)); // Set initial data for the first page
      setupColumns(data);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  const setupColumns = (data) => {
    if (data.length > 0) {
      const keys = Object.keys(data[0]);
      const columns = keys.map(key => ({
        headerName: key.charAt(0).toUpperCase() + key.slice(1),
        field: key
      }));
      setColumnDefs(columns);
    }
  };

  const updateRowData = (data) => {
    console.log('Updating row data:', data); // Debugging statement
    setRowData(data);
  };

  const handleAddRow = () => {
    setIsModalOpen(true);
  };

  const handleSaveRow = (newRow) => {
    // Implement logic to save the new row to the database or state
    console.log('New Row Data:', newRow);
  };

  const handleExportToExcel = () => {
    const ws = XLSX.utils.json_to_sheet(rowData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Leads');
    XLSX.writeFile(wb, 'leads.xlsx');
  };

  const handleExportToPDF = () => {
    const doc = new jsPDF();
    doc.text('Leads Data', 10, 10);
    rowData.forEach((row, index) => {
      doc.text(Object.values(row).join(', '), 10, 20 + index * 10);
    });
    doc.save('leads.pdf');
  };

  const handlePageChange = (event) => {
    const newPage = Number(event.target.value);
    setCurrentPage(newPage);

    // Update rowData based on the new page and filteredData
    const startIndex = (newPage - 1) * paginationPageSize;
    updateRowData(filteredData.slice(startIndex, startIndex + paginationPageSize));
  };

  const handleSearchToggle = () => {
    setIsSearchVisible(!isSearchVisible);
  };

  const handleSearchInputChange = (event) => {
    setSearchValue(event.target.value);
  };

  const handleSearch = () => {
    if (!searchValue.trim()) {
      resetSearch();
      return;
    }

    // Filter allData based on the search value
    const filtered = allData.filter(row => {
      return Object.values(row).some(value =>
        value && value.toString().toLowerCase().includes(searchValue.toLowerCase())
      );
    });

    // Update filteredData
    setFilteredData(filtered);

    // Update rowData and pagination based on filtered data
    setTotalRows(filtered.length);
    const startIndex = (currentPage - 1) * paginationPageSize;
    updateRowData(filtered.slice(startIndex, startIndex + paginationPageSize));
  };

  const resetSearch = () => {
    setSearchValue('');
    setFilteredData(allData); // Reset filteredData to allData
    setTotalRows(allData.length); // Update totalRows based on allData
    const startIndex = (currentPage - 1) * paginationPageSize;
    updateRowData(allData.slice(startIndex, startIndex + paginationPageSize)); // Reset rowData
  };

  const totalPages = Math.ceil(totalRows / paginationPageSize);
  const pageOptions = Array.from({ length: totalPages }, (_, i) => i + 1);

  const gridOptions = {
    rowSelection: 'single', // allows single row selection
    onRowClicked: event => {
      event.node.setSelected(true); // select the clicked row
    },
    getRowStyle: params => {
      if (params.node.isSelected()) {
        return { backgroundColor: 'lightyellow' };
      }
      return null;
    },
    // other grid options
  };

  return (
    <div className="custom-grid-container">
      <div className="header-box">
        <h1 className="header-title">Lead Management</h1>
        <div className="header-controls">
          <select
            className="page-dropdown"
            value={currentPage}
            onChange={handlePageChange}
          >
            {pageOptions.map(page => (
              <option key={page} value={page}>
                {page}
              </option>
            ))}
          </select>
        </div>
      </div>
      <div className="ag-theme-alpine">
        <AgGridReact
          gridOptions={gridOptions}
          rowData={rowData}
          columnDefs={columnDefs}
          pagination={true}
          paginationPageSize={paginationPageSize}
        />
      </div>
      {isSearchVisible && (
        <div className="search-container">
          <input
            type="text"
            className="search-input"
            placeholder="Enter name to search"
            value={searchValue}
            onChange={handleSearchInputChange}
          />
          <button onClick={handleSearch}>Search</button>
        </div>
      )}
      <div className="action-buttons">
        <button className="action-button" title="Add New Row" onClick={handleAddRow}>+</button>
        <button className="action-button" title="Edit Selected Row">✏️</button>
        <button className="action-button" title="View Selected Row">📄</button>
        <button className="action-button" title="Find Records" onClick={handleSearchToggle}>🔍</button>
        <button className="action-button" title="Reload Grid">🔄</button>
        <button className="action-button" title="Export to Excel" onClick={handleExportToExcel}>📊</button>
        <button className="action-button" title="Export to PDF" onClick={handleExportToPDF}>📄</button>
      </div>
      <AddRowModal
        isOpen={isModalOpen}
        onRequestClose={() => setIsModalOpen(false)}
        onSave={handleSaveRow}
      />
    </div>
  );
};

export default Welcome;
